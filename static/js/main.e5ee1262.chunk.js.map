{"version":3,"sources":["component/Setter/Setter.module.css","component/Display/Display.module.css","component/Counter/Counter.module.css","component/Button/Button.module.css","component/Button/Button.tsx","component/Display/Display.tsx","component/Counter/Counter.tsx","component/Setter/Setter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","disabled","disable","className","styles","button","onClick","callback","title","Display","count","maxCount","displayRed","display","Counter","wrapper","buttons","incrementCount","resetCounter","startValue","Setter","useState","dis","maxValue","redMax","value","type","onChange","e","setMax","Number","currentTarget","onChangeMaxHandler","redMin","setMin","onChangeMinHandler","setCounter","App","max","min","counter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5ee1262.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"redMax\":\"Setter_redMax__UsxFx\",\"redMin\":\"Setter_redMin__1xH9q\",\"button\":\"Setter_button__2jvAp\",\"buttons\":\"Setter_buttons__3K-o-\",\"wrapper\":\"Setter_wrapper__1vkXw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__3Eivr\",\"displayRed\":\"Display_displayRed__uTMEE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Counter_buttons__eOKAl\",\"wrapper\":\"Counter_wrapper__3TaDN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3ig9d\"};","import React from 'react';\nimport styles from './Button.module.css'\n\ntype propsType = {\n    title: string\n    callback: () => void\n    disable?: boolean\n}\n\n\nexport const Button = (props: propsType) => {\n    return (\n        <button disabled={props.disable} className={styles.button} onClick={props.callback}>{props.title}</button>\n    )\n}","import React from 'react';\nimport styles from './Display.module.css'\n\ntype DisplayPropsType = {\n    count: number\n    maxCount: number\n}\n\n\nexport const Display = (props: DisplayPropsType) => {\n    return (\n        <div className={props.count === props.maxCount ? styles.displayRed : styles.display}>\n            {props.count}\n        </div>\n    )\n}","import React from 'react';\nimport {Button} from '../Button/Button';\nimport {Display} from '../Display/Display';\nimport styles from './Counter.module.css'\n\n\ntype CounterPropsType = {\n    startValue: number\n    count: number\n    incrementCount: () => void\n    resetCounter: () => void\n    maxCount: number\n}\n\n\nexport const Counter = (props: CounterPropsType) => {\n\n    return (\n        <div className={styles.wrapper}>\n            <Display\n                maxCount={props.maxCount}\n                count={props.count}\n            />\n            <div className={styles.buttons}>\n                <Button title={'inc'} callback={props.incrementCount} disable={props.count === props.maxCount}/>\n                <Button title={'reset'} callback={props.resetCounter} disable={props.count === props.startValue}/>\n            </div>\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from 'react';\nimport {Input} from '../Input/Input';\nimport {Button} from '../Button/Button';\nimport styles from './Setter.module.css'\n\n\ntype SetterPropsType = {\n    maxValue: number\n    setMax: (max: number) => void\n    startValue: number\n    setMin: (min: number) => void\n    setCounter: (value: number) => void\n}\n\nexport const Setter = (props: SetterPropsType) => {\n    let [dis, setDis]= useState(false)\n\n    const onChangeMaxHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.setMax(Number(e.currentTarget.value))\n    }\n\n    const onChangeMinHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        props.setMin(Number(e.currentTarget.value))\n\n    }\n\n    const setNumber = () => {\n        props.setMax(props.maxValue)\n        props.setCounter(props.startValue)\n    }\n\n    const disableToggle = () => {\n        if(props.maxValue < 0 || props.maxValue === props.startValue || props.startValue < 0){\n            setDis(true)\n        }else{\n            setDis(false)\n        }\n    }\n\n    return (\n        <div className={styles.wrapper}>\n            <div>\n                <div>max value: <input className={props.maxValue < props.startValue ? styles.redMax : ''}\n                                       value={props.maxValue} type=\"number\"\n                                       onChange={(e) => onChangeMaxHandler(e)}/></div>\n                <div>start value: <input className={props.startValue >= props.maxValue ? styles.redMin : ''}\n                                         value={props.startValue} type=\"number\"\n                                         onChange={(e) => onChangeMinHandler(e)}/></div>\n\n\n            </div>\n            <div className={styles.buttons}>\n                <button disabled={dis} className={styles.button} onClick={setNumber}>Set</button>\n            </div>\n        </div>\n    )\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from './component/Counter/Counter';\nimport {Setter} from './component/Setter/Setter';\n\n\nfunction App() {\n\n    let [max, setMax] = useState<number>(5)\n    let [min, setMin] = useState<number>(0)\n\n    let maxValue = max\n    let startValue = min\n\n    let [counter, setCounter] = useState<number>(startValue)\n\n    const incrementCount = () => {\n        if (counter < maxValue) {\n            setCounter(++counter)\n        }\n    }\n\n    const resetCounter = () => {\n        setCounter(startValue)\n\n    }\n\n    const setInput = () => {\n\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Counter\n\n                startValue={startValue}\n                maxCount={maxValue}\n                count={counter}\n                incrementCount={incrementCount}\n                resetCounter={resetCounter}\n            />\n            <Setter\n                setCounter={setCounter}\n                maxValue={max}\n                setMax={setMax}\n                startValue={min}\n                setMin={setMin}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}