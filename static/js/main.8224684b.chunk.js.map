{"version":3,"sources":["component/Setter/Setter.module.css","component/Display/Display.module.css","component/Counter/Counter.module.css","component/Button/Button.tsx","component/Display/Display.tsx","component/Counter/Counter.tsx","component/Input/Input.tsx","component/Setter/Setter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Buttons","props","Button","variant","color","onClick","callback","disabled","disable","title","Display","className","count","maxCount","styles","displayRed","display","Counter","wrapper","buttons","incrementCount","resetCounter","startValue","setRender","Input","TextField","id","type","label","value","onChange","Setter","dis","maxValue","twiceWrapper","inputs","e","setMax","Number","currentTarget","setMin","errorSpan","span","setCounter","App","useState","max","min","counter","useEffect","valueMaxString","localStorage","getItem","newValue","JSON","parse","valueMinString","setItem","stringify","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8224684b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"redMax\":\"Setter_redMax__UsxFx\",\"redMin\":\"Setter_redMin__1xH9q\",\"button\":\"Setter_button__2jvAp\",\"buttons\":\"Setter_buttons__3K-o-\",\"wrapper\":\"Setter_wrapper__1vkXw\",\"twiceWrapper\":\"Setter_twiceWrapper__1PfdL\",\"errorSpan\":\"Setter_errorSpan__2gcgw\",\"span\":\"Setter_span__PuzYk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__3Eivr\",\"displayRed\":\"Display_displayRed__uTMEE\",\"errorMessage\":\"Display_errorMessage__1jv14\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Counter_buttons__eOKAl\",\"wrapper\":\"Counter_wrapper__3TaDN\",\"setterButton\":\"Counter_setterButton__16Pd4\"};","import React from 'react';\r\nimport styles from './Button.module.css'\r\nimport {Button} from '@material-ui/core';\r\n\r\ntype propsType = {\r\n    title: string\r\n    callback: () => void\r\n    disable?: boolean\r\n}\r\n\r\n\r\nexport const Buttons = (props: propsType) => {\r\n    return (\r\n        /*<button disabled={props.disable} className={styles.button} onClick={props.callback}>{props.title}</button>*/\r\n    <Button variant=\"contained\" color=\"primary\" onClick={props.callback} disabled={props.disable}>\r\n        {props.title}\r\n    </Button>\r\n    )\r\n}","import React from 'react';\nimport styles from './Display.module.css'\n\ntype DisplayPropsType = {\n    count: number\n    maxCount: number\n}\n\n\nexport const Display = (props: DisplayPropsType) => {\n    return (\n        <div className={props.count === props.maxCount ? styles.displayRed : styles.display}>\n            {props.count}\n        </div>\n    )\n}","import React from 'react';\r\nimport {Buttons} from '../Button/Button';\r\nimport {Display} from '../Display/Display';\r\nimport styles from './Counter.module.css'\r\n\r\n\r\ntype CounterPropsType = {\r\n    startValue: number\r\n    count: number\r\n    incrementCount: () => void\r\n    resetCounter: () => void\r\n    maxCount: number\r\n    setRender: (value: boolean) => void\r\n}\r\n\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n\r\n\r\n    const setRenderHandler = () => {\r\n        props.setRender(false)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <Display\r\n                maxCount={props.maxCount}\r\n                count={props.count}\r\n            />\r\n            <div className={styles.buttons}>\r\n                <Buttons title={'inc'} callback={props.incrementCount} disable={props.maxCount === props.count}/>\r\n                <Buttons title={'reset'} callback={props.resetCounter} disable={props.count === props.startValue}/>\r\n                <Buttons title={'Set'} callback={setRenderHandler}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//disabled={props.maxCount < 0 || props.startValue < 0 || props.maxCount === props.startValue} className={styles.setterButton} onClick={()=>props.setRender(false)}","import React, {ChangeEvent} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype InputPropsType = {\r\n    title: string\r\n    value: number\r\n    maxValue?: number\r\n    startValue?: number\r\n    callback: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\n\r\nexport const Input = (props:InputPropsType) => {\r\n\r\n    return(\r\n        /*<input value={props.value} onChange={props.callback} type=\"number\"/>*/\r\n   /* <TextField\r\n        value={props.value}\r\n        id=\"standard-number\"\r\n        label={props.title}\r\n        type=\"number\"\r\n        InputLabelProps={{\r\n            shrink: true,\r\n        }}\r\n        onChange={props.callback}\r\n    />*/\r\n    <TextField id=\"standard-basic\" type=\"number\" label={props.title}  value={props.value} onChange={props.callback}/>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {Input} from '../Input/Input';\r\nimport {Buttons} from '../Button/Button';\r\nimport styles from './Setter.module.css'\r\n\r\n\r\ntype SetterPropsType = {\r\n    maxValue: number\r\n    setMax: (max: number) => void\r\n    startValue: number\r\n    setMin: (min: number) => void\r\n    setCounter: (value: number) => void\r\n    setRender: (value: boolean) => void\r\n}\r\n\r\nexport const Setter = (props: SetterPropsType) => {\r\n\r\n\r\n    const onChangeMaxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMax(Number(e.currentTarget.value))\r\n    }\r\n\r\n    const onChangeMinHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMin(Number(e.currentTarget.value))\r\n\r\n    }\r\n\r\n    const setNumber = () => {\r\n        props.setMax(props.maxValue)\r\n        props.setCounter(props.startValue)\r\n        props.setRender(true)\r\n    }\r\n\r\n\r\n    let dis = props.maxValue < 0\r\n        || props.maxValue === props.startValue\r\n        || props.startValue < 0\r\n        || props.maxValue < props.startValue\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.twiceWrapper}>\r\n                <div className={styles.inputs}>\r\n                    <div>\r\n                        <Input value={props.maxValue} callback={onChangeMaxHandler} title={'Max value'}/>\r\n                    </div>\r\n                    <div>\r\n                        <Input value={props.startValue} callback={onChangeMinHandler}  title={'Min value'}/>\r\n                    </div>\r\n                </div>\r\n                {dis? <span className={styles.errorSpan} >Incorrect value!</span>: <span className={styles.span}>Set value</span>}\r\n                <div className={styles.buttons}>\r\n                    <Buttons\r\n                        disable={dis}\r\n                        callback={setNumber}\r\n                        title={'Set'}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {Counter} from './component/Counter/Counter';\r\nimport {Setter} from './component/Setter/Setter';\r\n\r\n\r\nfunction App() {\r\n\r\n    let [max, setMax] = useState<number>(5)\r\n    let [min, setMin] = useState<number>(0)\r\n\r\n    let maxValue = max\r\n    let startValue = min\r\n\r\n    let [counter, setCounter] = useState<number>(startValue)\r\n\r\n\r\n    useEffect(() => {\r\n        let valueMaxString = localStorage.getItem('counterMaxValue')\r\n        if (valueMaxString) {\r\n            let newValue = JSON.parse(valueMaxString)\r\n            if (newValue > 0) {\r\n                setMax(newValue)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let valueMinString = localStorage.getItem('counterMinValue')\r\n        if (valueMinString) {\r\n            let newValue = JSON.parse(valueMinString)\r\n            if (newValue >= 0) {\r\n                setMin(newValue)\r\n                setCounter(newValue)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('counterMaxValue', JSON.stringify(max))\r\n    }, [max])\r\n    useEffect(() => {\r\n        localStorage.setItem('counterMinValue', JSON.stringify(min))\r\n    }, [min])\r\n\r\n\r\n    const incrementCount = () => {\r\n        if (counter < maxValue) {\r\n            setCounter(++counter)\r\n        }\r\n    }\r\n\r\n    const resetCounter = () => {\r\n        setCounter(startValue)\r\n    }\r\n\r\n    let [render, setRender] = useState(true)\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {render ?\r\n                <Counter\r\n                    startValue={startValue}\r\n                    maxCount={maxValue}\r\n                    count={counter}\r\n                    incrementCount={incrementCount}\r\n                    resetCounter={resetCounter}\r\n                    setRender={setRender}\r\n                />\r\n                :\r\n                <Setter\r\n                    setCounter={setCounter}\r\n                    maxValue={max}\r\n                    setMax={setMax}\r\n                    startValue={min}\r\n                    setMin={setMin}\r\n                    setRender={setRender}\r\n                />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}