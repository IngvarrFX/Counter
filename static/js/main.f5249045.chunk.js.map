{"version":3,"sources":["component/Setter/Setter.module.css","component/Display/Display.module.css","component/Counter/Counter.module.css","component/Button/Button.tsx","component/Display/Display.tsx","bll/counter-reducer.ts","component/Counter/Counter.tsx","component/Input/Input.tsx","component/Setter/Setter.tsx","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["module","exports","Buttons","React","memo","props","Button","variant","color","onClick","callback","disabled","disable","title","Display","className","count","maxCount","styles","displayRed","display","initialState","maxValue","minValue","render","setMaxValueAC","type","setMinValueAC","countValueAC","renderAC","setMaxValueTC","dispatch","localStorage","setItem","JSON","stringify","Counter","useDispatch","wrapper","buttons","incrementCount","resetCounter","startValue","Input","TextField","id","label","value","onChange","Setter","dis","twiceWrapper","inputs","e","Number","currentTarget","errorSpan","span","App","useSelector","state","counter","useEffect","valueCountString","getItem","newValue","parse","minValueString","maxValueString","getState","currentValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5249045.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"redMax\":\"Setter_redMax__1NE5g\",\"redMin\":\"Setter_redMin__3jdy1\",\"button\":\"Setter_button__18cDX\",\"buttons\":\"Setter_buttons__1smwH\",\"wrapper\":\"Setter_wrapper__14oSM\",\"twiceWrapper\":\"Setter_twiceWrapper__zL3z0\",\"errorSpan\":\"Setter_errorSpan__1WWdi\",\"span\":\"Setter_span__1Kydy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__3_r5o\",\"displayRed\":\"Display_displayRed__1FnSE\",\"errorMessage\":\"Display_errorMessage__3Yvfx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Counter_buttons__2iuP9\",\"wrapper\":\"Counter_wrapper__2lG7w\",\"setterButton\":\"Counter_setterButton__32V67\"};","import React from 'react';\r\nimport styles from './Button.module.css'\r\nimport {Button} from '@material-ui/core';\r\n\r\ntype propsType = {\r\n    title: string\r\n    callback: () => void\r\n    disable?: boolean\r\n}\r\n\r\n\r\nexport const Buttons =React.memo ((props: propsType) => {\r\n    return (\r\n        /*<button disabled={props.disable} className={styles.button} onClick={props.callback}>{props.title}</button>*/\r\n    <Button variant=\"contained\" color=\"primary\" onClick={props.callback} disabled={props.disable}>\r\n        {props.title}\r\n    </Button>\r\n    )\r\n})","import React from 'react';\nimport styles from './Display.module.css'\n\ntype DisplayPropsType = {\n    count: number\n    maxCount: number\n}\n\n\nexport const Display =React.memo ((props: DisplayPropsType) => {\n    return (\n        <div className={props.count === props.maxCount ? styles.displayRed : styles.display}>\n            {props.count}\n        </div>\n    )\n})","import {Dispatch} from \"react\";\nimport {AppStateType} from \"./store\";\n\n\nconst INC_MAX_VALUE = \"INC_MAX_VALUE\"\nconst INC_MIN_VALUE = \"INC_MIN_VALUE\"\nconst SET_MAX_VALUE = \"SET_MAX_VALUE\"\nconst SET_MIN_VALUE = \"SET_MIN_VALUE\"\nconst COUNT_VALUE = \"COUNT_VALUE\"\nconst RENDER = \"RENDER\"\n\nexport type InitialStateType = {\n    maxValue: number\n    minValue: number\n    count: number\n    render: boolean\n}\nconst initialState = {\n    maxValue: 5,\n    minValue: 0,\n    count: 0,\n    render: true\n}\n\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\n    switch (action.type) {\n        case \"SET_MAX_VALUE\":\n            return {...state, maxValue: action.maxValue}\n        case \"SET_MIN_VALUE\":\n            return {...state, minValue: action.minValue, count: action.minValue}\n        case \"COUNT_VALUE\":\n            return {...state, count: action.count}\n        case \"RENDER\":\n            return {...state, render: action.render}\n\n    }\n    return state\n\n}\n\n\n//Action Creators\n\nexport type IncMaxValueType = {\n    type: typeof INC_MAX_VALUE\n}\nexport const incMaxValueAC = (): IncMaxValueType => ({type: INC_MAX_VALUE} as const)\n\n\nexport type SetMaxValueType = {\n    type: typeof SET_MAX_VALUE\n    maxValue: number\n}\nexport const setMaxValueAC = (maxValue: number): SetMaxValueType => ({type: SET_MAX_VALUE, maxValue} as const)\n\n\nexport type IncMinValueType = {\n    type: typeof INC_MIN_VALUE\n}\nexport const incMinValueAC = (): IncMinValueType => ({type: INC_MIN_VALUE} as const)\n\n\nexport type SetMinValueType = {\n    type: typeof SET_MIN_VALUE\n    minValue: number\n}\nexport const setMinValueAC = (minValue: number): SetMinValueType => ({type: SET_MIN_VALUE, minValue} as const)\n\n\nexport type CountType = {\n    type: typeof COUNT_VALUE\n    count: number\n}\nexport const countValueAC = (count: number): CountType => ({type: COUNT_VALUE, count} as const)\n\n\nexport type RenderType = {\n    type: typeof RENDER\n    render: boolean\n}\nexport const renderAC = (render: boolean): RenderType => ({type: RENDER, render} as const)\n\n//THUNK\n\nexport const countValueTC = () => (dispatch: Dispatch<ActionType>, getState: () => AppStateType) => {\n    let currentValue = getState().counter.count\n    localStorage.setItem(\"CounterValue\", JSON.stringify(currentValue + 1))\n    dispatch(countValueAC(currentValue + 1))\n}\nexport const setCountValueFromLocalStorageTC = () => (dispatch: Dispatch<ActionType>) => {\n    let valueCountString = localStorage.getItem(\"CounterValue\")\n    if (valueCountString) {\n        let newValue = JSON.parse(valueCountString)\n        if (newValue > 0) {\n            dispatch(countValueAC(newValue))\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\nexport const setMinValueTC = (minValue: number) => (dispatch: Dispatch<ActionType>) => {\n    localStorage.setItem(\"minValue\", JSON.stringify(minValue))\n    dispatch(setMinValueAC(minValue))\n}\nexport const setMinValueFromLocalStorageTC = () => (dispatch: Dispatch<ActionType>)=> {\n    let minValueString = localStorage.getItem(\"minValue\")\n    if(minValueString){\n        let newValue  = JSON.parse(minValueString)\n        if(newValue> 0){\n            dispatch(setMinValueAC(newValue))\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\nexport const setMaxValueTC = (maxValue: number) => (dispatch: Dispatch<ActionType>) => {\n    localStorage.setItem(\"maxValue\", JSON.stringify(maxValue))\n    dispatch(setMaxValueAC(maxValue))\n}\nexport const setMaxValueFromLocalStorageTC = () => (dispatch: Dispatch<ActionType>)=> {\n    let maxValueString = localStorage.getItem('maxValue')\n    if(maxValueString){\n        let newValue  = JSON.parse(maxValueString)\n        if(newValue> 0){\n            dispatch(setMaxValueAC(newValue))\n        }\n    }\n}\n\nexport type ActionType = IncMaxValueType\n    | IncMinValueType\n    | SetMaxValueType\n    | SetMinValueType\n    | CountType\n    | RenderType\n\n\n\n\n\n\n","import React from 'react';\r\nimport {Buttons} from '../Button/Button';\r\nimport {Display} from '../Display/Display';\r\nimport styles from './Counter.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {renderAC} from \"../../bll/counter-reducer\";\r\n\r\n\r\ntype CounterPropsType = {\r\n    startValue: number\r\n    count: number\r\n    incrementCount: () => void\r\n    resetCounter: () => void\r\n    maxCount: number\r\n    //setRender: (value: boolean) => void\r\n}\r\n\r\n\r\nexport const Counter =React.memo ((props: CounterPropsType) => {\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const setRenderHandler = () => {\r\n        //props.setRender(false)\r\n        dispatch(renderAC(false))\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <Display\r\n                maxCount={props.maxCount}\r\n                count={props.count}\r\n            />\r\n            <div className={styles.buttons}>\r\n                <Buttons title={'inc'} callback={props.incrementCount} disable={props.maxCount === props.count}/>\r\n                <Buttons title={'reset'} callback={props.resetCounter} disable={props.count === props.startValue}/>\r\n                <Buttons title={'Set'} callback={setRenderHandler}/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n//disabled={props.maxCount < 0 || props.startValue < 0 || props.maxCount === props.startValue} className={styles.setterButton} onClick={()=>props.setRender(false)}","import React, {ChangeEvent} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype InputPropsType = {\r\n    title: string\r\n    value: number\r\n    maxValue?: number\r\n    startValue?: number\r\n    callback: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\n\r\nexport const Input =React.memo( (props:InputPropsType) => {\r\n\r\n    return(\r\n        /*<input value={props.value} onChange={props.callback} type=\"number\"/>*/\r\n   /* <TextField\r\n        value={props.value}\r\n        id=\"standard-number\"\r\n        label={props.title}\r\n        type=\"number\"\r\n        InputLabelProps={{\r\n            shrink: true,\r\n        }}\r\n        onChange={props.callback}\r\n    />*/\r\n    <TextField id=\"standard-basic\" type=\"number\" label={props.title}  value={props.value} onChange={props.callback}/>\r\n    )\r\n})","import React, {ChangeEvent, Dispatch} from \"react\";\r\nimport {Input} from '../Input/Input';\r\nimport {Buttons} from '../Button/Button';\r\nimport styles from './Setter.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    ActionType,\r\n    countValueAC,\r\n    renderAC,\r\n    setMaxValueAC,\r\n    setMaxValueTC,\r\n    setMinValueAC, setMinValueTC\r\n} from \"../../bll/counter-reducer\";\r\n\r\n\r\ntype SetterPropsType = {\r\n    maxValue: number\r\n    // setMax: (max: number) => void\r\n    startValue: number\r\n    // setMin: (min: number) => void\r\n    // setCounter: (value: number) => void\r\n    //setRender: (value: boolean) => void\r\n}\r\n\r\nexport const Setter = React.memo((props: SetterPropsType) => {\r\n\r\n    let dispatch = useDispatch()\r\n\r\n\r\n    const onChangeMaxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // props.setMax(Number(e.currentTarget.value))\r\n        dispatch(setMaxValueTC(Number(e.currentTarget.value)))\r\n    }\r\n\r\n    const onChangeMinHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // props.setMin(Number(e.currentTarget.value))\r\n        dispatch(setMinValueTC(Number(e.currentTarget.value)))\r\n    }\r\n\r\n    const setNumber = () => {\r\n        dispatch(setMaxValueTC(props.maxValue))\r\n        // props.setMax(props.maxValue)\r\n        dispatch(countValueAC(props.startValue))\r\n        //props.setRender(true)\r\n        dispatch(renderAC(true))\r\n    }\r\n\r\n\r\n    let dis = props.maxValue < 0\r\n        || props.maxValue === props.startValue\r\n        || props.startValue < 0\r\n        || props.maxValue < props.startValue\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.twiceWrapper}>\r\n                <div className={styles.inputs}>\r\n                    <div>\r\n                        <Input value={props.maxValue} callback={onChangeMaxHandler} title={'Max value'}/>\r\n                    </div>\r\n                    <div>\r\n                        <Input value={props.startValue} callback={onChangeMinHandler}  title={'Min value'}/>\r\n                    </div>\r\n                </div>\r\n                {dis? <span className={styles.errorSpan} >Incorrect value!</span>: <span className={styles.span}>Set value</span>}\r\n                <div className={styles.buttons}>\r\n                    <Buttons\r\n                        disable={dis}\r\n                        callback={setNumber}\r\n                        title={'Set'}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport {Counter} from \"./component/Counter/Counter\";\r\nimport {Setter} from \"./component/Setter/Setter\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"./bll/store\";\r\nimport {\r\n    countValueAC,\r\n    countValueTC,\r\n    InitialStateType,\r\n    setCountValueFromLocalStorageTC,\r\n    setMaxValueFromLocalStorageTC,\r\n    setMinValueFromLocalStorageTC\r\n} from \"./bll/counter-reducer\";\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n    const value = useSelector<AppStateType, InitialStateType>(state => state.counter)\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setCountValueFromLocalStorageTC())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(setMinValueFromLocalStorageTC())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(setMaxValueFromLocalStorageTC())\r\n    }, [])\r\n\r\n    const incrementCount = () => {\r\n        if (value.count < value.maxValue) {\r\n            dispatch(countValueTC())\r\n        }\r\n    }\r\n\r\n    const resetCounter = () => {\r\n        dispatch(countValueAC(value.minValue))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {value.render ?\r\n                <Counter\r\n                    startValue={value.minValue}\r\n                    maxCount={value.maxValue}\r\n                    count={value.count}\r\n                    incrementCount={incrementCount}\r\n                    resetCounter={resetCounter}\r\n                />\r\n                :\r\n                <Setter\r\n                    maxValue={value.maxValue}\r\n                    startValue={value.minValue}\r\n                />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {counterReducer} from \"./counter-reducer\";\nimport {createStore,combineReducers} from \"redux\";\nimport {applyMiddleware} from \"@reduxjs/toolkit\";\nimport thunk from \"redux-thunk\";\n\n\n\nconst rootReducer = combineReducers({\n    counter: counterReducer\n})\n\nexport type AppStateType = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\n\ntype AppStoreType = typeof store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n            <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}